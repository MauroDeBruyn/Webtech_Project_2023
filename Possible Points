âž¡ Operations
âœ“     â€¢ Log into a remote server using SSH or SFTP
âœ˜     â€¢ Install and configure one web server of choice (Caddy, NGINX, Apache, â€¦)
âœ˜     â€¢ Configure said web server to handle PHP correctly
âœ˜     â€¢ Make sure PHP is capable of talking to the databaseâ€”PostgreSQLâ€”correctly

âž¡ Frontend
âœ˜     â€¢ About page (HTML, CSS)
âœ˜     â€¢ A page visualizing live data from the database (HTML, CSS, PHP, JavaScript, jQuery, AJAX, PHP)
âœ˜     â€¢ A page that can return the contents of the database in JSON, XML, or another format (PHP)

âž¡ Backend
âœ˜     â€¢ CRUD endpoints
âœ˜     â€¢ RESTful API
âœ˜     â€¢ Data stored in the database

âž¡ Security
âœ˜     â€¢ No SQL injections
âœ˜     â€¢ No default passwords
âœ˜     â€¢ Proper use of PKI (ssh keys)
âœ˜     â€¢ Services run as their own users
âœ˜     â€¢ Services are isolated

âž¡ Teamwork
âœ“     â€¢ Good git commit messages
âœ˜     â€¢ Proper use of GitHub pull requests
âœ˜     â€¢ Clear and plentiful GitHub issues
âœ˜     â€¢ The team was capable of working asynchronously
âœ˜     â€¢ Documentation was written

âž¡ Hardware
âœ˜     â€¢ Headless device that can use the REST API to upload data to the server
âœ˜     â€¢ A service that starts when the device boots
âœ˜     â€¢ Maybe the device can even pull data from the server to change its behavior?

âž¡ Nice extra's
âœ˜     â€¢ Amaze me ðŸ˜‰

âž¡ Presentation
âœ˜     â€¢ Explain what you created, and how you created it
âœ˜     â€¢ Tell me the story of how the group worked together
âœ˜     â€¢ Tell me what went well, and what did not
âœ˜     â€¢ Give a tech demo (I'll pray to the demo gods for you)
âœ˜     â€¢ Q&A



âœ“
âœ˜
